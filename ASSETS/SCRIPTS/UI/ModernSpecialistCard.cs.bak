using Godot;
using System;

namespace LocalLLMNPC.UI
{
    /// <summary>
    /// Modern, visually enhanced specialist card with animations and interactive elements.
    /// Created by Om Choksi for an impressive agricultural education platform experience.
    /// Features gradient backgrounds, particle effects, smooth transitions, and 3D-style elements.
    /// </summary>
    public partial class ModernSpecialistCard : Control
    {
        [Signal]
        public delegate void CardSelectedEventHandler(string specialtyName);

        [Signal]
        public delegate void CardHoveredEventHandler(string specialtyName);

        // Core Data
        public NPCSpecialty Specialty { get; private set; }

        // Visual Components
        private PanelContainer cardPanel;
        private VBoxContainer contentContainer;
        private TextureRect specialistAvatar;
        private RichTextLabel nameLabel;
        private RichTextLabel titleLabel;
        private RichTextLabel experienceLabel;
        private ProgressBar expertiseBar;
        private GridContainer statsGrid;

        // Enhanced Visual Effects
        private ParticleSystem2D hoverParticles;
        private ParticleSystem2D selectionParticles;
        private Control glowEffect;
        private AnimationPlayer cardAnimator;
        private Tween hoverTween;
        private Tween selectionTween;

        // Interactive Elements
        private Button quickChatButton;
        private Button assessmentButton;
        private Button viewProfileButton;

        // Status Indicators
        private Control availabilityIndicator;
        private Label sessionCount;
        private CircularProgressBar masteryProgress;

        // Visual States
        private bool isSelected = false;
        private bool isHovered = false;
        private bool isAvailable = true;

        // Styling & Colors
        private readonly Color CARD_BASE_COLOR = new Color(0.15f, 0.2f, 0.15f, 0.95f);
        private readonly Color CARD_HOVER_COLOR = new Color(0.2f, 0.3f, 0.2f, 1.0f);
        private readonly Color CARD_SELECTED_COLOR = new Color(0.25f, 0.4f, 0.25f, 1.0f);
        private readonly Color GLOW_COLOR = new Color(0.3f, 0.7f, 0.3f, 0.8f);
        private readonly Color ACCENT_COLOR = new Color(0.9f, 0.7f, 0.2f);

        public override void _Ready()
        {
            SetupCardStructure();
            SetupVisualEffects();
            SetupInteractions();
            SetupAnimations();
            ApplyModernStyling();
        }

        private void SetupCardStructure()
        {
            // Main card panel with rounded corners and shadow
            cardPanel = new PanelContainer();
            cardPanel.Name = "CardPanel";
            AddChild(cardPanel);

            // Content container
            contentContainer = new VBoxContainer();
            contentContainer.Name = "ContentContainer";
            cardPanel.AddChild(contentContainer);

            // Avatar section with circular frame
            var avatarSection = CreateAvatarSection();
            contentContainer.AddChild(avatarSection);

            // Info section with specialist details
            var infoSection = CreateInfoSection();
            contentContainer.AddChild(infoSection);

            // Stats section with progress indicators
            var statsSection = CreateStatsSection();
            contentContainer.AddChild(statsSection);

            // Action buttons section
            var actionsSection = CreateActionsSection();
            contentContainer.AddChild(actionsSection);
        }

        private Control CreateAvatarSection()
        {
            var section = new CenterContainer();
            section.Name = "AvatarSection";
            section.SetAnchorsAndOffsetsPreset(Control.PresetMode.TopWide);

            // Circular avatar frame
            var avatarFrame = new PanelContainer();
            avatarFrame.Name = "AvatarFrame";
            section.AddChild(avatarFrame);

            // Specialist avatar image
            specialistAvatar = new TextureRect();
            specialistAvatar.Name = "SpecialistAvatar";
            specialistAvatar.ExpandMode = TextureRect.ExpandModeEnum.FitWidthProportional;
            specialistAvatar.StretchMode = TextureRect.StretchModeEnum.KeepAspectCentered;
            avatarFrame.AddChild(specialistAvatar);

            // Availability indicator
            availabilityIndicator = new Control();
            availabilityIndicator.Name = "AvailabilityIndicator";
            section.AddChild(availabilityIndicator);

            return section;
        }

        private Control CreateInfoSection()
        {
            var section = new VBoxContainer();
            section.Name = "InfoSection";

            // Specialist name with gradient text effect
            nameLabel = new RichTextLabel();
            nameLabel.Name = "NameLabel";
            nameLabel.BbcodeEnabled = true;
            nameLabel.FitContent = true;
            section.AddChild(nameLabel);

            // Title/specialty with animated typewriter effect
            titleLabel = new RichTextLabel();
            titleLabel.Name = "TitleLabel";
            titleLabel.BbcodeEnabled = true;
            titleLabel.FitContent = true;
            section.AddChild(titleLabel);

            // Experience with animated counter
            experienceLabel = new RichTextLabel();
            experienceLabel.Name = "ExperienceLabel";
            experienceLabel.BbcodeEnabled = true;
            experienceLabel.FitContent = true;
            section.AddChild(experienceLabel);

            return section;
        }

        private Control CreateStatsSection()
        {
            var section = new VBoxContainer();
            section.Name = "StatsSection";

            // Expertise progress bar with gradient fill
            var expertiseContainer = new HBoxContainer();
            var expertiseLabel = new Label();
            expertiseLabel.Text = "Expertise";
            expertiseBar = new ProgressBar();
            expertiseBar.ShowPercentage = true;
            expertiseContainer.AddChild(expertiseLabel);
            expertiseContainer.AddChild(expertiseBar);
            section.AddChild(expertiseContainer);

            // Stats grid with session count and mastery
            statsGrid = new GridContainer();
            statsGrid.Columns = 2;

            // Session count
            sessionCount = new Label();
            sessionCount.Text = "Sessions: 0";
            statsGrid.AddChild(sessionCount);

            // Mastery progress (circular)
            masteryProgress = new CircularProgressBar();
            statsGrid.AddChild(masteryProgress);

            section.AddChild(statsGrid);

            return section;
        }

        private Control CreateActionsSection()
        {
            var section = new HBoxContainer();
            section.Name = "ActionsSection";
            section.Alignment = BoxContainer.AlignmentMode.Center;

            // Quick chat button with glow effect
            quickChatButton = new Button();
            quickChatButton.Text = "ðŸ’¬ Chat";
            quickChatButton.Name = "QuickChatButton";
            section.AddChild(quickChatButton);

            // Assessment button with pulse animation
            assessmentButton = new Button();
            assessmentButton.Text = "ðŸ“Š Test";
            assessmentButton.Name = "AssessmentButton";
            section.AddChild(assessmentButton);

            // View profile button
            viewProfileButton = new Button();
            viewProfileButton.Text = "ðŸ‘¤ Profile";
            viewProfileButton.Name = "ViewProfileButton";
            section.AddChild(viewProfileButton);

            return section;
        }

        private void SetupVisualEffects()
        {
            // Hover particles
            hoverParticles = new ParticleSystem2D();
            hoverParticles.Name = "HoverParticles";
            hoverParticles.Emitting = false;
            AddChild(hoverParticles);

            // Selection particles
            selectionParticles = new ParticleSystem2D();
            selectionParticles.Name = "SelectionParticles";
            selectionParticles.Emitting = false;
            AddChild(selectionParticles);

            // Glow effect
            glowEffect = new Control();
            glowEffect.Name = "GlowEffect";
            glowEffect.Modulate = new Color(1, 1, 1, 0);
            AddChild(glowEffect);
        }

        private void SetupInteractions()
        {
            // Mouse enter/exit events
            MouseEntered += OnMouseEntered;
            MouseExited += OnMouseExited;

            // Click events
            GuiInput += OnCardClicked;

            // Button connections
            quickChatButton.Pressed += OnQuickChatPressed;
            assessmentButton.Pressed += OnAssessmentPressed;
            viewProfileButton.Pressed += OnViewProfilePressed;
        }

        private void SetupAnimations()
        {
            // Main card animator
            cardAnimator = new AnimationPlayer();
            cardAnimator.Name = "CardAnimator";
            AddChild(cardAnimator);

            // Hover animation tween
            hoverTween = CreateTween();
            hoverTween.SetLoops();
            hoverTween.Stop();

            // Selection animation tween
            selectionTween = CreateTween();
            selectionTween.Stop();
        }

        private void ApplyModernStyling()
        {
            // Apply gradient background
            var styleBox = new StyleBoxFlat();
            styleBox.BgColor = CARD_BASE_COLOR;
            styleBox.CornerRadiusTopLeft = 15;
            styleBox.CornerRadiusTopRight = 15;
            styleBox.CornerRadiusBottomLeft = 15;
            styleBox.CornerRadiusBottomRight = 15;
            styleBox.ShadowColor = new Color(0, 0, 0, 0.3f);
            styleBox.ShadowSize = 8;
            styleBox.ShadowOffset = new Vector2(2, 4);

            cardPanel.AddThemeStyleboxOverride("panel", styleBox);

            // Apply font styling to labels
            ApplyTextStyling();

            // Apply button styling
            ApplyButtonStyling();
        }

        private void ApplyTextStyling()
        {
            // Name label styling
            if (nameLabel != null)
            {
                nameLabel.AddThemeColorOverride("default_color", new Color(0.95f, 0.95f, 0.9f));
                nameLabel.AddThemeFontSizeOverride("normal_font_size", 18);
            }

            // Title label styling
            if (titleLabel != null)
            {
                titleLabel.AddThemeColorOverride("default_color", ACCENT_COLOR);
                titleLabel.AddThemeFontSizeOverride("normal_font_size", 14);
            }

            // Experience label styling
            if (experienceLabel != null)
            {
                experienceLabel.AddThemeColorOverride("default_color", new Color(0.8f, 0.8f, 0.7f));
                experienceLabel.AddThemeFontSizeOverride("normal_font_size", 12);
            }
        }

        private void ApplyButtonStyling()
        {
            var buttons = new[] { quickChatButton, assessmentButton, viewProfileButton };

            foreach (var button in buttons)
            {
                if (button == null) continue;

                var buttonStyle = new StyleBoxFlat();
                buttonStyle.BgColor = new Color(0.3f, 0.5f, 0.3f, 0.8f);
                buttonStyle.CornerRadiusTopLeft = 8;
                buttonStyle.CornerRadiusTopRight = 8;
                buttonStyle.CornerRadiusBottomLeft = 8;
                buttonStyle.CornerRadiusBottomRight = 8;

                button.AddThemeStyleboxOverride("normal", buttonStyle);
                button.AddThemeColorOverride("font_color", Color.White);
                button.AddThemeFontSizeOverride("font_size", 12);
            }
        }

        // Event Handlers
        private void OnMouseEntered()
        {
            if (!isHovered)
            {
                isHovered = true;
                PlayHoverAnimation();
                EmitSignal(SignalName.CardHovered, (int)Specialty);
            }
        }

        private void OnMouseExited()
        {
            if (isHovered && !isSelected)
            {
                isHovered = false;
                PlayUnhoverAnimation();
            }
        }

        private void OnCardClicked(InputEvent @event)
        {
            if (@event is InputEventMouseButton mouseEvent && mouseEvent.Pressed && mouseEvent.ButtonIndex == MouseButton.Left)
            {
                SetSelected(true);
                EmitSignal(SignalName.CardSelected, (int)Specialty);
            }
        }

        private void OnQuickChatPressed()
        {
            // Quick chat functionality
            GD.Print($"Quick chat with {Specialty}");
        }

        private void OnAssessmentPressed()
        {
            // Assessment functionality
            GD.Print($"Start assessment for {Specialty}");
        }

        private void OnViewProfilePressed()
        {
            // View profile functionality
            GD.Print($"View profile for {Specialty}");
        }

        // Animation Methods
        private void PlayHoverAnimation()
        {
            hoverTween.Stop();
            hoverTween = CreateTween();
            hoverTween.SetParallel(true);

            // Scale animation
            hoverTween.TweenProperty(this, "scale", new Vector2(1.05f, 1.05f), 0.2f)
                .SetTrans(Tween.TransitionType.Quart)
                .SetEase(Tween.EaseType.Out);

            // Glow effect
            hoverTween.TweenProperty(glowEffect, "modulate:a", 0.6f, 0.2f);

            // Particle effect
            hoverParticles.Emitting = true;
        }

        private void PlayUnhoverAnimation()
        {
            hoverTween.Stop();
            hoverTween = CreateTween();
            hoverTween.SetParallel(true);

            // Scale back
            hoverTween.TweenProperty(this, "scale", Vector2.One, 0.2f)
                .SetTrans(Tween.TransitionType.Quart)
                .SetEase(Tween.EaseType.Out);

            // Remove glow
            hoverTween.TweenProperty(glowEffect, "modulate:a", 0.0f, 0.2f);

            // Stop particles
            hoverParticles.Emitting = false;
        }

        private void PlaySelectionAnimation()
        {
            selectionTween.Stop();
            selectionTween = CreateTween();
            selectionTween.SetParallel(true);

            // Pulse effect
            selectionTween.TweenProperty(this, "scale", new Vector2(1.1f, 1.1f), 0.1f);
            selectionTween.TweenProperty(this, "scale", new Vector2(1.05f, 1.05f), 0.1f).SetDelay(0.1f);

            // Selection particles burst
            selectionParticles.Emitting = true;
            selectionTween.TweenCallback(StopSelectionParticles).SetDelay(1.0f);
        }

        private void StopSelectionParticles()
        {
            selectionParticles.Emitting = false;
        }

        // Public Methods
        public void SetSelected(bool selected)
        {
            isSelected = selected;

            if (selected)
            {
                PlaySelectionAnimation();
                UpdateCardStyle(CARD_SELECTED_COLOR);
            }
            else
            {
                UpdateCardStyle(CARD_BASE_COLOR);
                PlayUnhoverAnimation();
            }
        }

        public void SetSpecialty(NPCSpecialty specialty)
        {
            Specialty = specialty;
            UpdateSpecialistInfo();
        }

        public void UpdateSessionCount(int count)
        {
            if (sessionCount != null)
            {
                sessionCount.Text = $"Sessions: {count}";
            }
        }

        public void UpdateMasteryProgress(float progress)
        {
            if (masteryProgress != null)
            {
                masteryProgress.Value = progress * 100;
            }
        }

        private void UpdateCardStyle(Color bgColor)
        {
            var styleBox = cardPanel.GetThemeStylebox("panel") as StyleBoxFlat;
            if (styleBox != null)
            {
                var newStyle = styleBox.Duplicate() as StyleBoxFlat;
                newStyle.BgColor = bgColor;
                cardPanel.AddThemeStyleboxOverride("panel", newStyle);
            }
        }

        private void UpdateSpecialistInfo()
        {
            // Update specialist information based on specialty
            var info = GetSpecialistInfo(Specialty);

            if (nameLabel != null)
                nameLabel.Text = $"[center][color=#F5F5E9]{info.Name}[/color][/center]";

            if (titleLabel != null)
                titleLabel.Text = $"[center][color=#E6B84D]{info.Title}[/color][/center]";

            if (experienceLabel != null)
                experienceLabel.Text = $"[center]{info.Experience} years experience[/center]";

            if (expertiseBar != null)
                expertiseBar.Value = info.ExpertiseLevel;
        }

        private SpecialistInfo GetSpecialistInfo(NPCSpecialty specialty)
        {
            return specialty switch
            {
                NPCSpecialty.SoilScience => new SpecialistInfo("Dr. Terra Firma", "Soil Science Professor", 20, 95),
                NPCSpecialty.PlantBiology => new SpecialistInfo("Dr. Flora Verde", "Plant Biology Professor", 25, 92),
                NPCSpecialty.WaterManagement => new SpecialistInfo("Hydro Henderson", "Water Management Consultant", 18, 88),
                NPCSpecialty.Composting => new SpecialistInfo("Compost Carl", "Composting Master", 15, 85),
                NPCSpecialty.PestManagement => new SpecialistInfo("Dr. Beneficial Betty", "IPM Research Specialist", 22, 90),
                NPCSpecialty.Permaculture => new SpecialistInfo("Perma Pete", "Permaculture Design Master", 30, 94),
                NPCSpecialty.GeneralAgriculture => new SpecialistInfo("Professor Green Thumb", "General Agriculture Coordinator", 28, 89),
                _ => new SpecialistInfo("Unknown Specialist", "Agricultural Expert", 10, 75)
            };
        }

        private struct SpecialistInfo
        {
            public string Name;
            public string Title;
            public int Experience;
            public int ExpertiseLevel;

            public SpecialistInfo(string name, string title, int experience, int expertiseLevel)
            {
                Name = name;
                Title = title;
                Experience = experience;
                ExpertiseLevel = expertiseLevel;
            }
        }
    }

    /// <summary>
    /// Custom circular progress bar for modern UI elements
    /// </summary>
    public partial class CircularProgressBar : Control
    {
        private float _value = 0;
        public float Value
        {
            get => _value;
            set
            {
                _value = Mathf.Clamp(value, 0, 100);
                QueueRedraw();
            }
        }

        public override void _Draw()
        {
            var center = Size / 2;
            var radius = Mathf.Min(Size.X, Size.Y) / 2 - 5;

            // Background circle
            DrawArc(center, radius, 0, Mathf.Tau, 64, new Color(0.3f, 0.3f, 0.3f), 4);

            // Progress arc
            var progressAngle = (_value / 100.0f) * Mathf.Tau;
            DrawArc(center, radius, -Mathf.Pi / 2, -Mathf.Pi / 2 + progressAngle, 64, new Color(0.3f, 0.7f, 0.3f), 4);

            // Center text
            var font = ThemeDB.FallbackFont;
            var text = $"{_value:F0}%";
            var textSize = font.GetStringSize(text, HorizontalAlignment.Center, -1, 12);
            DrawString(font, center - textSize / 2, text, HorizontalAlignment.Center, -1, 12, new Color(0.9f, 0.9f, 0.9f));
        }
    }
}
