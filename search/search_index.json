{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Local LLM NPC: Agricultural University Platform World's First Multi-Agent AI Educational Platform for Agriculture Developed by Om Choksi | 2025 Table of Contents Project Overview Key Features AI Professors Quick Start System Requirements Installation Configuration Running the Platform Demo Video Guide Troubleshooting Technical Architecture Development Setup License & Credits Project Overview Local LLM NPC Agricultural University is a groundbreaking educational platform that revolutionizes agricultural learning through artificial intelligence. This innovative system creates the world's first virtual agricultural university, featuring 7 specialized AI professors powered by advanced Gemma language models running completely offline. Mission Statement \"Democratizing agricultural education through AI-powered, multi-agent learning systems that provide personalized, expert-level instruction accessible to everyone, anywhere, anytime.\" Innovation Highlights World's First multi-agent agricultural education platform 100% Offline Operation - no internet required after setup Advanced AI Integration - Gemma 2 models with specialized agricultural knowledge Multi-Specialist Collaboration - AI professors that work together and cross-reference Adaptive Learning - personalized difficulty and pacing Professional Assessment - comprehensive evaluation and progress tracking Key Features Multi-Agent AI System 7 Specialized AI Professors with domain expertise spanning all agricultural sciences Cross-Referral Intelligence - professors recommend each other based on topic relevance Collaborative Problem Solving - multiple specialists working together on complex issues 15-30 Years Simulated Experience - each professor has deep, specialized knowledge Advanced Learning Analytics Real-time Progress Tracking across all agricultural domains Competency Mapping - visual representation of skill development Learning Pattern Recognition - AI adapts to your learning style Performance Analytics - detailed insights into your educational journey Adaptive Assessment System Dynamic Difficulty Adjustment - questions adapt to your skill level Multiple Assessment Types - theoretical, practical, and scenario-based evaluations Instant Feedback - immediate scoring and improvement recommendations Certification Ready - track progress toward agricultural certifications Privacy-First Design Complete Offline Operation - no data transmission to external servers Local AI Processing - all conversations processed on your device Secure Learning Environment - your educational data stays private GDPR Compliant - privacy by design architecture Natural Language Processing Human-like Conversations - natural dialogue with AI professors Context Awareness - professors remember previous conversations Multi-language Support - expandable to multiple languages Voice Integration Ready - prepared for future voice interaction features AI Professors Dr. Terra Firma - Soil Science Professor Expertise : Soil Chemistry, Soil Biology, Nutrition Management Experience : 20 years in soil science research and education Specializes in : pH management, nutrient deficiency diagnosis, soil testing, composting integration Dr. Flora Verde - Plant Biology Professor Expertise : Plant Physiology, Genetics, Crop Science Experience : 25 years in plant biology and crop development Specializes in : Plant disease diagnosis, growth optimization, breeding programs, photosynthesis Hydro Henderson - Water Management Consultant Expertise : Irrigation Systems, Water Conservation, Hydroponic Systems Experience : 18 years in agricultural water management Specializes in : Drip irrigation, water scheduling, drought management, aquaponics Compost Carl - Composting Master Expertise : Organic Waste Management, Soil Amendment, Sustainability Experience : 15 years in composting and organic farming Specializes in : Compost recipes, decomposition science, organic certification, waste reduction Dr. Beneficial Betty - IPM Research Specialist Expertise : Integrated Pest Management, Beneficial Insects, Organic Solutions Experience : 22 years in entomology and pest management Specializes in : Biological controls, pest identification, beneficial ecosystems, organic pesticides Perma Pete - Permaculture Design Master Expertise : Sustainable Design, Ecosystem Management, Regenerative Agriculture Experience : 30 years in permaculture and sustainable systems Specializes in : Design principles, food forests, water harvesting, biodiversity enhancement Professor Green Thumb - General Agriculture Coordinator Expertise : Farm Management, Agricultural Technology, Extension Services Experience : 28 years in agricultural education and extension Specializes in : Farm planning, technology integration, crop rotation, business planning Quick Start ** Get up and running in under 5 minutes!** Option 1: Ready-to-Run Executables (Recommended) For Windows Users: # 1. Navigate to Windows binaries cd BIN/WINDOWS/ # 2. Run the executable ./local-llm-npc\\ \\(4.4\\).exe For Linux Users: # 1. Navigate to Linux binaries cd BIN/LINUX/ # 2. Make executable and run chmod +x local-llm-npc\\ \\(4.4\\).x86_64 ./local-llm-npc\\ \\(4.4\\).x86_64 Option 2: Development Mode (For Developers) # 1. Clone the repository git clone https://github.com/omchoksi108/Local-LLM-NPC-Multi-Agent-Agricultural-University-Platform.git cd local-llm-npc # 2. Install dependencies dotnet restore # 3. Open in Godot 4.4.1 godot4 project.godot # 4. Press F5 to run AI Setup (Required for Both Options) # Install Ollama (AI Engine) curl -fsSL https://ollama.ai/install.sh | sh # Linux/macOS # Windows: Download from https://ollama.ai/download/windows # Start Ollama service ollama serve # Install AI models (choose one) ollama pull gemma2:2b # Fast, lightweight (4GB RAM) ollama pull gemma2:9b # Better quality (16GB RAM) ollama pull gemma2:27b # Best quality (32GB RAM) First Launch Configuration Launch the platform using one of the methods above Configure Ollama URL : Set to http://localhost:11434 Select your learning level : Beginner, Intermediate, or Advanced Choose your first professor and start learning! System Requirements Minimum Requirements Component Specification Operating System Windows 10/11, Ubuntu 20.04+, macOS 12+ Memory (RAM) 8GB (12GB recommended for AI) Storage 5GB free space Processor Intel i5 / AMD Ryzen 5 (quad-core) Graphics Integrated graphics sufficient Network Required only for initial setup Recommended Specifications Component Specification Memory (RAM) 16GB+ for optimal AI performance Storage SSD with 10GB+ free space Processor Intel i7/i9 / AMD Ryzen 7/9 Graphics NVIDIA RTX / AMD RDNA2+ (optional) AI Models Support for 2B-27B parameter models Supported AI Models Gemma 2 Series : 2B, 9B, 27B variants (recommended) Llama 3.1 : 8B, 70B variants (alternative) Phi-3 : Mini, Small, Medium (lightweight alternative) CodeLlama : 7B, 13B (development support) Installation Pre-Installation Checklist [ ] Verify system meets minimum requirements [ ] Ensure stable internet connection for initial setup [ ] Have administrative privileges for software installation [ ] Close unnecessary applications to free up memory Step 1: Install Ollama AI Engine Choose your operating system: Windows Installation # Option 1: Download installer # Visit: https://ollama.ai/download/windows # Option 2: Use Windows Package Manager winget install Ollama.Ollama # Verify installation ollama --version macOS Installation # Option 1: Homebrew (recommended) brew install ollama # Option 2: Direct download # Visit: https://ollama.ai/download/macos # Verify installation ollama --version Linux Installation # Ubuntu/Debian/Most Linux distributions curl -fsSL https://ollama.ai/install.sh | sh # Verify installation ollama --version Step 2: Install AI Models # Start Ollama service (run in background) ollama serve & # Choose and install your preferred model: # Fast & Lightweight (4-8GB RAM) ollama pull gemma2:2b # Balanced Performance (12-16GB RAM) ollama pull gemma2:9b # Maximum Quality (24-32GB RAM) ollama pull gemma2:27b # Verify models are installed ollama list Step 3: Install the Platform Option A: Use Pre-built Executables (Fastest) # No additional installation needed! # Navigate to your platform's folder: # Windows Users: cd BIN/WINDOWS/ ./local-llm-npc\\ \\(4.4\\).exe # Linux Users: cd BIN/LINUX/ chmod +x local-llm-npc\\ \\(4.4\\).x86_64 ./local-llm-npc\\ \\(4.4\\).x86_64 Option B: Development Setup (For Developers) # 1. Install prerequisites # Download Godot 4.4.1 (Mono/C#): https://godotengine.org/download # Install .NET 8.0 SDK: https://dotnet.microsoft.com/download # 2. Clone repository git clone https://github.com/omchoksi108/Local-LLM-NPC-Multi-Agent-Agricultural-University-Platform.git cd local-llm-npc # 3. Restore dependencies dotnet restore # 4. Open in Godot godot4 project.godot # Press F5 to run Configuration Ollama Configuration Basic Setup # Start Ollama with default settings ollama serve # Your Ollama server will be available at: # http://localhost:11434 Advanced Configuration # Custom host and port export OLLAMA_HOST=0.0.0.0:11434 ollama serve # Enable GPU acceleration (NVIDIA) export CUDA_VISIBLE_DEVICES=0 export OLLAMA_HOST=0.0.0.0:11434 ollama serve # Performance tuning for low-memory systems export OLLAMA_MAX_LOADED_MODELS=1 export OLLAMA_MAX_QUEUE=10 ollama serve Platform Configuration First Launch Setup ** Launch the Application** Run the executable or start from Godot Wait for the main menu to appear ** Access Settings** Click the Settings gear icon Or press Ctrl+, (Windows/Linux) or Cmd+, (macOS) Configure AI Connection Ollama Server URL: http://localhost:11434 Default Model: gemma2:2b (or your installed model) Connection Timeout: 30 seconds Max Response Tokens: 1000 Set Learning Preferences Difficulty Level : Beginner, Intermediate, or Advanced Learning Goals : Select your agricultural interests Pace : Casual, Regular, or Intensive learning Language : Currently English (multi-language support planned) Performance Optimization For Speed (Low-End Systems) { \"ai_settings\": { \"model\": \"gemma2:2b\", \"temperature\": 0.7, \"max_tokens\": 600, \"timeout\": 20 }, \"ui_settings\": { \"animations\": \"minimal\", \"auto_save\": true, \"background_processing\": false } } For Quality (High-End Systems) { \"ai_settings\": { \"model\": \"gemma2:9b\", \"temperature\": 0.5, \"max_tokens\": 1500, \"timeout\": 45 }, \"ui_settings\": { \"animations\": \"full\", \"auto_save\": true, \"background_processing\": true } } Running the Platform Method 1: Direct Executable Launch (Recommended) Pre-Launch Checklist [ ] Ollama service is running ( ollama serve ) [ ] AI models are installed ( ollama list ) [ ] System meets minimum requirements [ ] No conflicting applications running on port 11434 Launch Process Windows Users: # 1. Start Ollama (if not already running) ollama serve # 2. Open new terminal and navigate to project cd BIN/WINDOWS/ # 3. Run the executable ./local-llm-npc\\ \\(4.4\\).exe Linux Users: # 1. Start Ollama (if not already running) ollama serve & # 2. Navigate to Linux binaries cd BIN/LINUX/ # 3. Make executable and run chmod +x local-llm-npc\\ \\(4.4\\).x86_64 ./local-llm-npc\\ \\(4.4\\).x86_64 First-Time Setup Wizard AI Connection Server URL: http://localhost:11434 Test connection \u2713 Select default model User Profile Name and learning goals Experience level assessment Preferred learning pace Learning Path Choose your first professor Set initial learning objectives Configure assessment preferences Method 2: Development Mode (For Developers) Godot Editor Launch # 1. Ensure prerequisites are installed godot4 --version # Should show 4.4.1 Mono dotnet --version # Should show 8.0+ # 2. Open project in Godot godot4 project.godot # 3. Verify project configuration # Project \u2192 Project Settings \u2192 Dotnet \u2192 Assembly Name: \"local-llm-npc\" # 4. Run the project # Press F5 or click Play button Command Line Execution # Run specific scene godot4 --main-scene res://ASSETS/SCENES/main.tscn # Debug mode godot4 --main-scene res://ASSETS/SCENES/main.tscn --verbose # Export and run godot4 --export-release \"Windows Desktop\" ./build/game.exe Method 3: Custom Build # 1. Clone and prepare git clone https://github.com/omchoksi108/Local-LLM-NPC-Multi-Agent-Agricultural-University-Platform.git cd local-llm-npc # 2. Build dependencies dotnet restore dotnet build --configuration Release # 3. Run from Godot godot4 project.godot Run the Project Press F5 (Run Project) Or click the Play button Select main scene if prompted Method 3: Command Line Execution # From project directory godot4 --main-scene res://ASSETS/SCENES/main.tscn # Or export and run godot4 --export-release \"Windows Desktop\" ./build/game.exe Demo Questions by Specialist Dr. Terra Firma (Soil Science): - \"What's the ideal pH for growing blueberries?\" - \"How do I fix nitrogen-deficient soil?\" Dr. Flora Verde (Plant Biology): - \"Why are my tomato leaves turning yellow?\" - \"How does photosynthesis affect plant growth?\" Hydro Henderson (Water Management): - \"Design a drip irrigation system for my vegetable garden\" - \"How much water do potatoes need per week?\" Demo Scenarios by Professor Professor Demo Question Expected Response Highlight Dr. Terra Firma \"How do I fix acidic soil for vegetables?\" pH management + cross-referral to composting Dr. Flora Verde \"Why are my pepper plants flowering but not fruiting?\" Pollination science + referral to IPM specialist Hydro Henderson \"Design irrigation for my 1000 sq ft garden\" Customized irrigation plan with calculations Dr. Beneficial Betty \"How do I control aphids organically?\" IPM strategy + beneficial insect recommendations Recording Best Practices Resolution : 1920x1080 minimum, 4K preferred Frame Rate : 30 FPS for smooth demonstrations Audio : Use external microphone, avoid system audio feedback Preparation : Practice each scenario 2-3 times before recording Backup : Record multiple takes of critical sections Troubleshooting Common Issues & Solutions Issue 1: Cannot Connect to Ollama # Diagnosis ps aux | grep ollama # Check if Ollama is running netstat -an | grep 11434 # Verify port availability curl http://localhost:11434/api/version # Test connection # Solutions ollama serve # Start Ollama service killall ollama && ollama serve # Restart if hung systemctl status ollama # Check service status (Linux) Issue 2: AI Model Not Found # Diagnosis ollama list # Show installed models ollama show gemma2:2b # Check specific model details # Solutions ollama pull gemma2:2b # Install missing model ollama pull gemma2:9b # Install higher quality model ollama ps # Show currently loaded models Issue 3: Slow AI Responses # Performance Optimization ollama pull gemma2:2b # Use smaller, faster model export OLLAMA_MAX_LOADED_MODELS=1 # Limit memory usage export OLLAMA_MAX_QUEUE=5 # Reduce queue size # System Resource Check htop # Monitor CPU/RAM usage (Linux/macOS) taskmgr # Task Manager (Windows) nvidia-smi # GPU usage (NVIDIA) Issue 4: Platform Won't Start # Dependency Check dotnet --version # Verify .NET 8.0+ installed godot4 --version # Verify Godot 4.4.1 # Project Repair cd local-llm-npc dotnet clean && dotnet restore && dotnet build rm -rf .godot && godot4 project.godot # Rebuild Godot cache Issue 5: Assessment System Errors # File Permission Check chmod +x BIN/LINUX/local-llm-npc*.x86_64 # Linux permissions # Asset Verification find ASSETS/ -name \"*.cs\" | wc -l # Count C# scripts find ASSETS/ -name \"*.tscn\" | wc -l # Count scene files Performance Optimization For Low-End Systems (8GB RAM) { \"recommended_settings\": { \"ai_model\": \"gemma2:2b\", \"max_tokens\": 600, \"timeout\": 20, \"ui_animations\": \"minimal\", \"background_processing\": false } } For High-End Systems (16GB+ RAM) { \"optimal_settings\": { \"ai_model\": \"gemma2:9b\", \"max_tokens\": 1500, \"timeout\": 45, \"ui_animations\": \"full\", \"background_processing\": true, \"concurrent_conversations\": 2 } } Debug Mode # Enable comprehensive logging export OLLAMA_DEBUG=1 export GODOT_DEBUG=1 # Run with detailed output ./local-llm-npc.exe --verbose --debug # Check log files tail -f ~/.ollama/logs/server.log tail -f ~/.local/share/godot/app_userdata/local-llm-npc/logs/ dotnet build Check for missing dependencies ldd BIN/LINUX/local-llm-npc*.x86_64 # Linux #### Issue 5: \"Assessment not loading\" ```bash # Solution: Check file permissions chmod +x BIN/LINUX/local-llm-npc*.x86_64 # Linux # Verify assessment files exist ls ASSETS/SCRIPTS/Global/ ls ASSETS/PREFABS/BUNDLE/UI/ Performance Optimization For Low-End Systems: Use gemma2:2b model (lighter) Reduce max tokens to 500-800 Disable visual effects in settings Close other applications For High-End Systems: Use gemma2:9b or gemma2:27b models Increase max tokens to 1500-2000 Enable GPU acceleration for Ollama Run multiple concurrent conversations Debug Mode Enable debug logging for troubleshooting: # Set environment variables export OLLAMA_DEBUG=1 export GODOT_DEBUG=1 # Run with verbose output ./local-llm-npc.exe --verbose --debug # Check logs tail -f ~/.ollama/logs/server.log # Ollama logs tail -f ~/.local/share/godot/app_userdata/local-llm-npc/logs/ # Game logs Technical Architecture System Overview Local LLM NPC Agricultural University is built on a robust, modular architecture designed for scalability, performance, and maintainability. The system leverages cutting-edge technologies to deliver an exceptional educational experience. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 PRESENTATION LAYER \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 SpecialistSelector \u2502 ConversationUI \u2502 Analytics \u2502 \u2502 ProgressDashboard \u2502 AssessmentUI \u2502 SettingsUI \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 BUSINESS LOGIC LAYER \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 SpecialistManager \u2502 AssessmentEngine \u2502 Analytics \u2502 \u2502 SpecialistNPC \u2502 ConversationMgr \u2502 EventSystem \u2502 \u2502 LearningPathEngine \u2502 ProgressTracker \u2502 UserProfile \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 DATA ACCESS LAYER \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 OllamaService \u2502 GameData \u2502 FileAccess \u2502 \u2502 ConfigManager \u2502 CacheManager \u2502 StorageAPI \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 AI INTEGRATION LAYER \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Gemma 2 Models \u2502 Ollama Server \u2502 JSON Schema \u2502 \u2502 PromptTemplates \u2502 ResponseParser \u2502 ModelRouter \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Project Structure local-llm-npc/ \u251c\u2500\u2500 ASSETS/ # Game assets and resources \u2502 \u251c\u2500\u2500 PREFABS/ # Reusable components \u2502 \u2502 \u251c\u2500\u2500 BUNDLE/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 ConversationStarter/ # Conversation system \u2502 \u2502 \u2502 \u2514\u2500\u2500 UI/ # User interface components \u2502 \u2502 \u251c\u2500\u2500 NPC/ # AI Professor prefabs \u2502 \u2502 \u251c\u2500\u2500 player/ # Player character \u2502 \u2502 \u2514\u2500\u2500 settings/ # Settings management \u2502 \u251c\u2500\u2500 SCENES/ \u2502 \u2502 \u2514\u2500\u2500 main.tscn # Main application scene \u2502 \u251c\u2500\u2500 SCRIPTS/ \u2502 \u2502 \u251c\u2500\u2500 Global/ # Global game systems \u2502 \u2502 \u2502 \u251c\u2500\u2500 GameData.cs # Game state management \u2502 \u2502 \u2502 \u251c\u2500\u2500 SpecialistManager.cs # Multi-agent coordinator \u2502 \u2502 \u2502 \u2514\u2500\u2500 ConversationAnalytics.cs # Learning analytics \u2502 \u2502 \u251c\u2500\u2500 UI/ # User interface scripts \u2502 \u2502 \u2502 \u251c\u2500\u2500 SpecialistSelector.cs \u2502 \u2502 \u2502 \u251c\u2500\u2500 ProgressDashboard.cs \u2502 \u2502 \u2502 \u2514\u2500\u2500 AssessmentInterface.cs \u2502 \u2502 \u2514\u2500\u2500 Specialists/ # AI Professor implementations \u2502 \u2502 \u251c\u2500\u2500 SpecialistNPC.cs # Base specialist class \u2502 \u2502 \u2514\u2500\u2500 LearningAssessmentSystem.cs \u2502 \u2514\u2500\u2500 TEXTURES/ # Visual assets \u251c\u2500\u2500 BIN/ # Compiled executables \u2502 \u251c\u2500\u2500 WINDOWS/ # Windows deployment \u2502 \u2514\u2500\u2500 LINUX/ # Linux deployment \u251c\u2500\u2500 Documentation/ # Project documentation \u2502 \u251c\u2500\u2500 README.md # Project overview \u2502 \u2514\u2500\u2500 USER_GUIDE.md # User manual \u251c\u2500\u2500 Configuration Files \u2502 \u251c\u2500\u2500 project.godot # Godot project settings \u2502 \u251c\u2500\u2500 local-llm-npc.csproj # C# project configuration \u2502 \u2514\u2500\u2500 local-llm-npc.sln # Solution file \u2514\u2500\u2500 Build Scripts \u251c\u2500\u2500 setup.bat # Windows setup \u2514\u2500\u2500 setup.sh # Linux setup \ud83d\udd27 Key Components 1. Multi-Agent AI System public partial class SpecialistManager : Node { public static SpecialistManager Instance { get; private set; } // Core functionality public void SwitchToSpecialist(NPCSpecialty specialty); public NPCSpecialty SuggestSpecialistForTopic(string topic); public void HandleCrossReferral(string topic, NPCSpecialty from, NPCSpecialty to); // Advanced features public Dictionary<string, float> AnalyzeTopicComplexity(string query); public List<NPCSpecialty> GetCollaborativeSpecialists(string topic); } 2. Adaptive Assessment Engine public partial class LearningAssessmentSystem : Node { // Assessment management public AssessmentResult GenerateAdaptiveAssessment(NPCSpecialty specialty, DifficultyLevel level); public void UpdateLearnerProfile(AssessmentResult result); public CompetencyMap GetLearnerCompetencies(string userId); // Analytics integration public LearningAnalytics AnalyzeLearningProgress(); public PersonalizedRecommendations GenerateRecommendations(); } 3. Conversation Analytics public partial class ConversationAnalytics : Node { // Real-time tracking public void TrackConversationMetrics(ConversationData data); public EngagementScore CalculateEngagement(List<ConversationTurn> turns); public LearningProgress UpdateProgress(string topic, float comprehension); // Advanced analytics public HeatMap GenerateTopicHeatMap(); public List<LearningInsight> ExtractLearningInsights(); } Technology Stack Layer Technology Version Purpose Game Engine Godot 4.4.1 Core application framework Programming C# .NET 8.0 Business logic and scripting AI Engine Ollama Latest Local AI model serving AI Models Gemma 2 2B/9B/27B Natural language processing Data Format JSON - Configuration and data storage Networking HTTP REST - Ollama API communication UI Framework Godot UI 4.4.1 User interface components System Workflow graph TD A[User Input] --> B[SpecialistSelector] B --> C[SpecialistManager] C --> D[SpecialistNPC] D --> E[OllamaService] E --> F[Gemma 2 Model] F --> G[Response Processing] G --> H[Cross-Referral Analysis] H --> I[Analytics Update] I --> J[UI Update] J --> K[User Response] Performance Metrics Startup Time : < 10 seconds (with cached models) Response Time : 2-15 seconds (depending on model size) Memory Usage : 4-32GB (varies by AI model) Storage : 2-15GB (including models) Concurrent Users : Single-user focused design Offline Capability : 100% after initial setup Development Setup Developer Prerequisites Required Software # Godot 4.4.1 (Mono/C# support) wget https://github.com/godotengine/godot/releases/download/4.4.1-stable/Godot_v4.4.1-stable_mono_linux_x86_64.zip # .NET 8.0 SDK curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --version 8.0 # Ollama (AI Engine) curl -fsSL https://ollama.ai/install.sh | sh Recommended Development Tools Visual Studio Code with C# extension JetBrains Rider (premium IDE for C#) Git for version control Docker (optional, for containerized AI models) Development Workflow 1. Initial Setup # Clone repository git clone https://github.com/omchoksi108/Local-LLM-NPC-Multi-Agent-Agricultural-University-Platform.git cd local-llm-npc # Install dependencies dotnet restore # Verify setup dotnet build --configuration Debug 2. Godot Development # Open project in Godot godot4 project.godot # Build and run (F5) # Or use command line: godot4 --main-scene res://ASSETS/SCENES/main.tscn 3. AI Development & Testing # Start Ollama for development ollama serve # Install development models ollama pull gemma2:2b # Fast development ollama pull codellama:7b # Code assistance # Test AI integration curl -X POST http://localhost:11434/api/generate \\ -H \"Content-Type: application/json\" \\ -d '{\"model\":\"gemma2:2b\",\"prompt\":\"Test agricultural question\"}' Testing & Quality Assurance Unit Testing # Run C# unit tests dotnet test # Run with coverage dotnet test --collect:\"XPlat Code Coverage\" Integration Testing # Test Ollama integration bash tests/integration/test_ollama_connection.sh # Test specialist interactions bash tests/integration/test_specialist_responses.sh Performance Testing # Memory usage profiling dotnet run --configuration Release --verbosity diagnostic # AI response time testing python tests/performance/ai_response_benchmark.py Build & Deployment Export Configuration Configure Export Templates Download Godot export templates 4.4.1 Configure for target platforms Export Commands # Windows build godot4 --export-release \"Windows Desktop\" ./build/windows/local-llm-npc.exe # Linux build godot4 --export-release \"Linux/X11\" ./build/linux/local-llm-npc.x86_64 # macOS build godot4 --export-release \"macOS\" ./build/macos/local-llm-npc.app Automated Build Pipeline # .github/workflows/build.yml name: Build and Test on: [push, pull_request] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Setup .NET uses: actions/setup-dotnet@v3 with: dotnet-version: 8.0.x - name: Build run: dotnet build --configuration Release - name: Test run: dotnet test License & Credits License Information License : MIT License Copyright : \u00a9 2025 Om Choksi Project : Local LLM NPC Agricultural University Platform MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. Project Creator Om Choksi Lead Developer & Agricultural Education Innovator Vision : Democratizing agricultural education through AI Innovation : World's first multi-agent agricultural university Expertise : AI integration, educational technology, sustainable agriculture Mission : Making agricultural knowledge accessible to everyone, everywhere Acknowledgments Technology Partners Godot Engine - Open-source game engine powering our platform Ollama - Local AI model serving infrastructure Google Gemma - Advanced language models for natural conversations .NET Foundation - Robust application framework Agricultural Research Community Agricultural Extension Services worldwide for domain expertise inspiration Sustainable Agriculture Research communities for best practices Educational Technology researchers for learning science insights Open Source Community for collaborative development principles Special Thanks Early Testers who provided valuable feedback during development Agricultural Experts who validated our specialist knowledge systems Education Professionals who guided our assessment and analytics design Open Source Contributors who make projects like this possible Contributing We welcome contributions from the community! Here's how you can help: Ways to Contribute Bug Reports : Submit issues with detailed reproduction steps Feature Requests : Propose new educational features or improvements Code Contributions : Submit pull requests with enhancements Documentation : Improve guides, tutorials, and technical documentation Translations : Help make the platform accessible in multiple languages Testing : Help test new features and report compatibility issues Development Guidelines Fork the repository and create a feature branch Follow coding standards (C# conventions, Godot best practices) Write comprehensive tests for new functionality Update documentation for any user-facing changes Submit a pull request with clear description of changes Support & Contact Getting Help Documentation : Check this guide and USER_GUIDE.md Issues : Use GitHub Issues for bug reports Discussions : Join GitHub Discussions for questions Direct Contact : Create an issue for direct communication Project Links Homepage : GitHub Repository Issues : Report Bugs & Request Features Discussions : Community Forum Documentation : Complete User Guide Conclusion Local LLM NPC Agricultural University represents a paradigm shift in educational technology, combining the power of artificial intelligence with the accessibility of offline computing. This platform demonstrates that cutting-edge AI education can be privacy-first, locally-run, and universally accessible. Key Achievements World's First multi-agent agricultural AI university 100% Offline operation after initial setup 7 Specialized AI Professors with collaborative intelligence Advanced Analytics for personalized learning Open Source and community-driven development Future Vision This project lays the foundation for the future of AI-powered education, where: - Knowledge is democratized and accessible to everyone - AI tutors are specialized and collaborative - Learning is personalized and adaptive - Privacy is preserved through local processing - Education transcends geographical and economic barriers Thank You Thank you for exploring Local LLM NPC Agricultural University. Whether you're an educator, student, developer, or agricultural enthusiast, you're part of a community that believes in the transformative power of accessible, AI-enhanced education. Ready to start your agricultural learning journey? Developed with by Om Choksi | Powered by Godot, Ollama & Gemma | \u00a9 2025 \u2502 \u2502 \u2514\u2500\u2500 AssessmentInterface.cs \u2502 \u2514\u2500\u2500 TEXTURES/ \u251c\u2500\u2500 BIN/ \u2502 \u251c\u2500\u2500 WINDOWS/ # Windows executables \u2502 \u2514\u2500\u2500 LINUX/ # Linux executables \u251c\u2500\u2500 my-project/ \u2502 \u2514\u2500\u2500 docs/ \u2502 \u2514\u2500\u2500 index.md # This documentation \u251c\u2500\u2500 backstories/ # AI specialist knowledge \u251c\u2500\u2500 README.md # Project overview \u251c\u2500\u2500 USER_GUIDE.md # User manual \u251c\u2500\u2500 TECHNICAL_DOCUMENTATION.md # Technical details \u2514\u2500\u2500 project.godot # Godot project file ### Key Components #### 1. SpecialistManager (Core Coordination) ```csharp public partial class SpecialistManager : Node { public static SpecialistManager Instance { get; } public void SwitchToSpecialist(NPCSpecialty specialty); public NPCSpecialty SuggestSpecialistForTopic(string topic); } 2. Multi-Agent AI System 7 specialized AI professors Cross-referral intelligence Collaborative problem solving Domain-specific expertise 3. Assessment Engine Adaptive difficulty adjustment Multiple question types Real-time performance tracking Competency mapping 4. Analytics System Learning pattern recognition Progress tracking Performance analytics Personalized recommendations Development Setup Prerequisites for Development Development Environment ```bash # Install Godot 4.4.1 (Mono/C#) wget https://downloads.tuxfamily.org/godotengine/4.4.1/mono/ # Install .NET 8.0 SDK curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --version 8.0.0 # Install Visual Studio Code (optional) wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg ``` AI Development Tools ```bash # Install Ollama for AI development curl -fsSL https://ollama.ai/install.sh | sh # Pull development models ollama pull gemma2:2b ollama pull codellama:7b # For code assistance ``` Building from Source Clone and Setup ```bash git clone https://github.com/omchoksi108/Local-LLM-NPC-Multi-Agent-Agricultural-University-Platform.git cd local-llm-npc # Restore dependencies dotnet restore # Build project dotnet build --configuration Release ``` Development Workflow ```bash # Open in Godot Editor godot4 project.godot # Or use VS Code with Godot extension code . ``` Testing ```bash # Run unit tests dotnet test # Integration testing with Ollama curl http://localhost:11434/api/generate -d '{\"model\":\"gemma2:2b\",\"prompt\":\"Test\"}' ``` Export for Distribution Configure Export Templates Download Godot export templates Configure for target platforms (Windows/Linux/macOS) Export Commands ```bash # Export for Windows godot4 --export-release \"Windows Desktop\" ./build/windows/local-llm-npc.exe # Export for Linux godot4 --export-release \"Linux/X11\" ./build/linux/local-llm-npc.x86_64 # Export for macOS godot4 --export-release \"macOS\" ./build/macos/local-llm-npc.app ``` License and Credits License : MIT License Created by : Om Choksi Project : Local LLM NPC Agricultural University Platform Technology : Godot 4.4.1, C#/.NET 8.0, Ollama, Gemma 2 Models Acknowledgments Godot Engine - Open-source game engine Ollama - Local AI model serving Google Gemma - Advanced language models Agricultural Research Community - Domain expertise inspiration Support and Contact For technical support, contributions, or questions: Creator : Om Choksi Project Repository : GitHub - Local LLM NPC Documentation : This file and accompanying guides Issues : Use GitHub Issues for bug reports and feature requests Getting Help Check Troubleshooting Section above Review User Guide : USER_GUIDE.md Technical Details : TECHNICAL_DOCUMENTATION.md Community Support : GitHub Discussions Direct Contact : Create an issue with detailed information Happy Learning! Welcome to the future of agricultural education with AI-powered, multi-agent learning systems!","title":"Local LLM NPC: Agricultural University Platform"},{"location":"#local-llm-npc-agricultural-university-platform","text":"World's First Multi-Agent AI Educational Platform for Agriculture Developed by Om Choksi | 2025","title":"Local LLM NPC: Agricultural University Platform"},{"location":"#table-of-contents","text":"Project Overview Key Features AI Professors Quick Start System Requirements Installation Configuration Running the Platform Demo Video Guide Troubleshooting Technical Architecture Development Setup License & Credits","title":"Table of Contents"},{"location":"#project-overview","text":"Local LLM NPC Agricultural University is a groundbreaking educational platform that revolutionizes agricultural learning through artificial intelligence. This innovative system creates the world's first virtual agricultural university, featuring 7 specialized AI professors powered by advanced Gemma language models running completely offline.","title":"Project Overview"},{"location":"#mission-statement","text":"\"Democratizing agricultural education through AI-powered, multi-agent learning systems that provide personalized, expert-level instruction accessible to everyone, anywhere, anytime.\"","title":"Mission Statement"},{"location":"#innovation-highlights","text":"World's First multi-agent agricultural education platform 100% Offline Operation - no internet required after setup Advanced AI Integration - Gemma 2 models with specialized agricultural knowledge Multi-Specialist Collaboration - AI professors that work together and cross-reference Adaptive Learning - personalized difficulty and pacing Professional Assessment - comprehensive evaluation and progress tracking","title":"Innovation Highlights"},{"location":"#key-features","text":"","title":"Key Features"},{"location":"#multi-agent-ai-system","text":"7 Specialized AI Professors with domain expertise spanning all agricultural sciences Cross-Referral Intelligence - professors recommend each other based on topic relevance Collaborative Problem Solving - multiple specialists working together on complex issues 15-30 Years Simulated Experience - each professor has deep, specialized knowledge","title":"Multi-Agent AI System"},{"location":"#advanced-learning-analytics","text":"Real-time Progress Tracking across all agricultural domains Competency Mapping - visual representation of skill development Learning Pattern Recognition - AI adapts to your learning style Performance Analytics - detailed insights into your educational journey","title":"Advanced Learning Analytics"},{"location":"#adaptive-assessment-system","text":"Dynamic Difficulty Adjustment - questions adapt to your skill level Multiple Assessment Types - theoretical, practical, and scenario-based evaluations Instant Feedback - immediate scoring and improvement recommendations Certification Ready - track progress toward agricultural certifications","title":"Adaptive Assessment System"},{"location":"#privacy-first-design","text":"Complete Offline Operation - no data transmission to external servers Local AI Processing - all conversations processed on your device Secure Learning Environment - your educational data stays private GDPR Compliant - privacy by design architecture","title":"Privacy-First Design"},{"location":"#natural-language-processing","text":"Human-like Conversations - natural dialogue with AI professors Context Awareness - professors remember previous conversations Multi-language Support - expandable to multiple languages Voice Integration Ready - prepared for future voice interaction features","title":"Natural Language Processing"},{"location":"#ai-professors","text":"","title":"AI Professors"},{"location":"#dr-terra-firma-soil-science-professor","text":"Expertise : Soil Chemistry, Soil Biology, Nutrition Management Experience : 20 years in soil science research and education Specializes in : pH management, nutrient deficiency diagnosis, soil testing, composting integration","title":"Dr. Terra Firma - Soil Science Professor"},{"location":"#dr-flora-verde-plant-biology-professor","text":"Expertise : Plant Physiology, Genetics, Crop Science Experience : 25 years in plant biology and crop development Specializes in : Plant disease diagnosis, growth optimization, breeding programs, photosynthesis","title":"Dr. Flora Verde - Plant Biology Professor"},{"location":"#hydro-henderson-water-management-consultant","text":"Expertise : Irrigation Systems, Water Conservation, Hydroponic Systems Experience : 18 years in agricultural water management Specializes in : Drip irrigation, water scheduling, drought management, aquaponics","title":"Hydro Henderson - Water Management Consultant"},{"location":"#compost-carl-composting-master","text":"Expertise : Organic Waste Management, Soil Amendment, Sustainability Experience : 15 years in composting and organic farming Specializes in : Compost recipes, decomposition science, organic certification, waste reduction","title":"Compost Carl - Composting Master"},{"location":"#dr-beneficial-betty-ipm-research-specialist","text":"Expertise : Integrated Pest Management, Beneficial Insects, Organic Solutions Experience : 22 years in entomology and pest management Specializes in : Biological controls, pest identification, beneficial ecosystems, organic pesticides","title":"Dr. Beneficial Betty - IPM Research Specialist"},{"location":"#perma-pete-permaculture-design-master","text":"Expertise : Sustainable Design, Ecosystem Management, Regenerative Agriculture Experience : 30 years in permaculture and sustainable systems Specializes in : Design principles, food forests, water harvesting, biodiversity enhancement","title":"Perma Pete - Permaculture Design Master"},{"location":"#professor-green-thumb-general-agriculture-coordinator","text":"Expertise : Farm Management, Agricultural Technology, Extension Services Experience : 28 years in agricultural education and extension Specializes in : Farm planning, technology integration, crop rotation, business planning","title":"Professor Green Thumb - General Agriculture Coordinator"},{"location":"#quick-start","text":"** Get up and running in under 5 minutes!**","title":"Quick Start"},{"location":"#option-1-ready-to-run-executables-recommended","text":"","title":"Option 1: Ready-to-Run Executables (Recommended)"},{"location":"#for-windows-users","text":"# 1. Navigate to Windows binaries cd BIN/WINDOWS/ # 2. Run the executable ./local-llm-npc\\ \\(4.4\\).exe","title":"For Windows Users:"},{"location":"#for-linux-users","text":"# 1. Navigate to Linux binaries cd BIN/LINUX/ # 2. Make executable and run chmod +x local-llm-npc\\ \\(4.4\\).x86_64 ./local-llm-npc\\ \\(4.4\\).x86_64","title":"For Linux Users:"},{"location":"#option-2-development-mode-for-developers","text":"# 1. Clone the repository git clone https://github.com/omchoksi108/Local-LLM-NPC-Multi-Agent-Agricultural-University-Platform.git cd local-llm-npc # 2. Install dependencies dotnet restore # 3. Open in Godot 4.4.1 godot4 project.godot # 4. Press F5 to run","title":"Option 2: Development Mode (For Developers)"},{"location":"#ai-setup-required-for-both-options","text":"# Install Ollama (AI Engine) curl -fsSL https://ollama.ai/install.sh | sh # Linux/macOS # Windows: Download from https://ollama.ai/download/windows # Start Ollama service ollama serve # Install AI models (choose one) ollama pull gemma2:2b # Fast, lightweight (4GB RAM) ollama pull gemma2:9b # Better quality (16GB RAM) ollama pull gemma2:27b # Best quality (32GB RAM)","title":"AI Setup (Required for Both Options)"},{"location":"#first-launch-configuration","text":"Launch the platform using one of the methods above Configure Ollama URL : Set to http://localhost:11434 Select your learning level : Beginner, Intermediate, or Advanced Choose your first professor and start learning!","title":"First Launch Configuration"},{"location":"#system-requirements","text":"","title":"System Requirements"},{"location":"#minimum-requirements","text":"Component Specification Operating System Windows 10/11, Ubuntu 20.04+, macOS 12+ Memory (RAM) 8GB (12GB recommended for AI) Storage 5GB free space Processor Intel i5 / AMD Ryzen 5 (quad-core) Graphics Integrated graphics sufficient Network Required only for initial setup","title":"Minimum Requirements"},{"location":"#recommended-specifications","text":"Component Specification Memory (RAM) 16GB+ for optimal AI performance Storage SSD with 10GB+ free space Processor Intel i7/i9 / AMD Ryzen 7/9 Graphics NVIDIA RTX / AMD RDNA2+ (optional) AI Models Support for 2B-27B parameter models","title":"Recommended Specifications"},{"location":"#supported-ai-models","text":"Gemma 2 Series : 2B, 9B, 27B variants (recommended) Llama 3.1 : 8B, 70B variants (alternative) Phi-3 : Mini, Small, Medium (lightweight alternative) CodeLlama : 7B, 13B (development support)","title":"Supported AI Models"},{"location":"#installation","text":"","title":"Installation"},{"location":"#pre-installation-checklist","text":"[ ] Verify system meets minimum requirements [ ] Ensure stable internet connection for initial setup [ ] Have administrative privileges for software installation [ ] Close unnecessary applications to free up memory","title":"Pre-Installation Checklist"},{"location":"#step-1-install-ollama-ai-engine","text":"Choose your operating system:","title":"Step 1: Install Ollama AI Engine"},{"location":"#windows-installation","text":"# Option 1: Download installer # Visit: https://ollama.ai/download/windows # Option 2: Use Windows Package Manager winget install Ollama.Ollama # Verify installation ollama --version","title":"Windows Installation"},{"location":"#macos-installation","text":"# Option 1: Homebrew (recommended) brew install ollama # Option 2: Direct download # Visit: https://ollama.ai/download/macos # Verify installation ollama --version","title":"macOS Installation"},{"location":"#linux-installation","text":"# Ubuntu/Debian/Most Linux distributions curl -fsSL https://ollama.ai/install.sh | sh # Verify installation ollama --version","title":"Linux Installation"},{"location":"#step-2-install-ai-models","text":"# Start Ollama service (run in background) ollama serve & # Choose and install your preferred model: # Fast & Lightweight (4-8GB RAM) ollama pull gemma2:2b # Balanced Performance (12-16GB RAM) ollama pull gemma2:9b # Maximum Quality (24-32GB RAM) ollama pull gemma2:27b # Verify models are installed ollama list","title":"Step 2: Install AI Models"},{"location":"#step-3-install-the-platform","text":"","title":"Step 3: Install the Platform"},{"location":"#option-a-use-pre-built-executables-fastest","text":"# No additional installation needed! # Navigate to your platform's folder: # Windows Users: cd BIN/WINDOWS/ ./local-llm-npc\\ \\(4.4\\).exe # Linux Users: cd BIN/LINUX/ chmod +x local-llm-npc\\ \\(4.4\\).x86_64 ./local-llm-npc\\ \\(4.4\\).x86_64","title":"Option A: Use Pre-built Executables (Fastest)"},{"location":"#option-b-development-setup-for-developers","text":"# 1. Install prerequisites # Download Godot 4.4.1 (Mono/C#): https://godotengine.org/download # Install .NET 8.0 SDK: https://dotnet.microsoft.com/download # 2. Clone repository git clone https://github.com/omchoksi108/Local-LLM-NPC-Multi-Agent-Agricultural-University-Platform.git cd local-llm-npc # 3. Restore dependencies dotnet restore # 4. Open in Godot godot4 project.godot # Press F5 to run","title":"Option B: Development Setup (For Developers)"},{"location":"#configuration","text":"","title":"Configuration"},{"location":"#ollama-configuration","text":"","title":"Ollama Configuration"},{"location":"#basic-setup","text":"# Start Ollama with default settings ollama serve # Your Ollama server will be available at: # http://localhost:11434","title":"Basic Setup"},{"location":"#advanced-configuration","text":"# Custom host and port export OLLAMA_HOST=0.0.0.0:11434 ollama serve # Enable GPU acceleration (NVIDIA) export CUDA_VISIBLE_DEVICES=0 export OLLAMA_HOST=0.0.0.0:11434 ollama serve # Performance tuning for low-memory systems export OLLAMA_MAX_LOADED_MODELS=1 export OLLAMA_MAX_QUEUE=10 ollama serve","title":"Advanced Configuration"},{"location":"#platform-configuration","text":"","title":"Platform Configuration"},{"location":"#first-launch-setup","text":"** Launch the Application** Run the executable or start from Godot Wait for the main menu to appear ** Access Settings** Click the Settings gear icon Or press Ctrl+, (Windows/Linux) or Cmd+, (macOS) Configure AI Connection Ollama Server URL: http://localhost:11434 Default Model: gemma2:2b (or your installed model) Connection Timeout: 30 seconds Max Response Tokens: 1000 Set Learning Preferences Difficulty Level : Beginner, Intermediate, or Advanced Learning Goals : Select your agricultural interests Pace : Casual, Regular, or Intensive learning Language : Currently English (multi-language support planned)","title":"First Launch Setup"},{"location":"#performance-optimization","text":"For Speed (Low-End Systems) { \"ai_settings\": { \"model\": \"gemma2:2b\", \"temperature\": 0.7, \"max_tokens\": 600, \"timeout\": 20 }, \"ui_settings\": { \"animations\": \"minimal\", \"auto_save\": true, \"background_processing\": false } } For Quality (High-End Systems) { \"ai_settings\": { \"model\": \"gemma2:9b\", \"temperature\": 0.5, \"max_tokens\": 1500, \"timeout\": 45 }, \"ui_settings\": { \"animations\": \"full\", \"auto_save\": true, \"background_processing\": true } }","title":"Performance Optimization"},{"location":"#running-the-platform","text":"","title":"Running the Platform"},{"location":"#method-1-direct-executable-launch-recommended","text":"","title":"Method 1: Direct Executable Launch (Recommended)"},{"location":"#pre-launch-checklist","text":"[ ] Ollama service is running ( ollama serve ) [ ] AI models are installed ( ollama list ) [ ] System meets minimum requirements [ ] No conflicting applications running on port 11434","title":"Pre-Launch Checklist"},{"location":"#launch-process","text":"Windows Users: # 1. Start Ollama (if not already running) ollama serve # 2. Open new terminal and navigate to project cd BIN/WINDOWS/ # 3. Run the executable ./local-llm-npc\\ \\(4.4\\).exe Linux Users: # 1. Start Ollama (if not already running) ollama serve & # 2. Navigate to Linux binaries cd BIN/LINUX/ # 3. Make executable and run chmod +x local-llm-npc\\ \\(4.4\\).x86_64 ./local-llm-npc\\ \\(4.4\\).x86_64","title":"Launch Process"},{"location":"#first-time-setup-wizard","text":"AI Connection Server URL: http://localhost:11434 Test connection \u2713 Select default model User Profile Name and learning goals Experience level assessment Preferred learning pace Learning Path Choose your first professor Set initial learning objectives Configure assessment preferences","title":"First-Time Setup Wizard"},{"location":"#method-2-development-mode-for-developers","text":"","title":"Method 2: Development Mode (For Developers)"},{"location":"#godot-editor-launch","text":"# 1. Ensure prerequisites are installed godot4 --version # Should show 4.4.1 Mono dotnet --version # Should show 8.0+ # 2. Open project in Godot godot4 project.godot # 3. Verify project configuration # Project \u2192 Project Settings \u2192 Dotnet \u2192 Assembly Name: \"local-llm-npc\" # 4. Run the project # Press F5 or click Play button","title":"Godot Editor Launch"},{"location":"#command-line-execution","text":"# Run specific scene godot4 --main-scene res://ASSETS/SCENES/main.tscn # Debug mode godot4 --main-scene res://ASSETS/SCENES/main.tscn --verbose # Export and run godot4 --export-release \"Windows Desktop\" ./build/game.exe","title":"Command Line Execution"},{"location":"#method-3-custom-build","text":"# 1. Clone and prepare git clone https://github.com/omchoksi108/Local-LLM-NPC-Multi-Agent-Agricultural-University-Platform.git cd local-llm-npc # 2. Build dependencies dotnet restore dotnet build --configuration Release # 3. Run from Godot godot4 project.godot Run the Project Press F5 (Run Project) Or click the Play button Select main scene if prompted","title":"Method 3: Custom Build"},{"location":"#method-3-command-line-execution","text":"# From project directory godot4 --main-scene res://ASSETS/SCENES/main.tscn # Or export and run godot4 --export-release \"Windows Desktop\" ./build/game.exe","title":"Method 3: Command Line Execution"},{"location":"#demo-questions-by-specialist","text":"Dr. Terra Firma (Soil Science): - \"What's the ideal pH for growing blueberries?\" - \"How do I fix nitrogen-deficient soil?\" Dr. Flora Verde (Plant Biology): - \"Why are my tomato leaves turning yellow?\" - \"How does photosynthesis affect plant growth?\" Hydro Henderson (Water Management): - \"Design a drip irrigation system for my vegetable garden\" - \"How much water do potatoes need per week?\"","title":"Demo Questions by Specialist"},{"location":"#demo-scenarios-by-professor","text":"Professor Demo Question Expected Response Highlight Dr. Terra Firma \"How do I fix acidic soil for vegetables?\" pH management + cross-referral to composting Dr. Flora Verde \"Why are my pepper plants flowering but not fruiting?\" Pollination science + referral to IPM specialist Hydro Henderson \"Design irrigation for my 1000 sq ft garden\" Customized irrigation plan with calculations Dr. Beneficial Betty \"How do I control aphids organically?\" IPM strategy + beneficial insect recommendations","title":"Demo Scenarios by Professor"},{"location":"#recording-best-practices","text":"Resolution : 1920x1080 minimum, 4K preferred Frame Rate : 30 FPS for smooth demonstrations Audio : Use external microphone, avoid system audio feedback Preparation : Practice each scenario 2-3 times before recording Backup : Record multiple takes of critical sections","title":"Recording Best Practices"},{"location":"#troubleshooting","text":"","title":"Troubleshooting"},{"location":"#common-issues-solutions","text":"","title":"Common Issues &amp; Solutions"},{"location":"#issue-1-cannot-connect-to-ollama","text":"# Diagnosis ps aux | grep ollama # Check if Ollama is running netstat -an | grep 11434 # Verify port availability curl http://localhost:11434/api/version # Test connection # Solutions ollama serve # Start Ollama service killall ollama && ollama serve # Restart if hung systemctl status ollama # Check service status (Linux)","title":"Issue 1: Cannot Connect to Ollama"},{"location":"#issue-2-ai-model-not-found","text":"# Diagnosis ollama list # Show installed models ollama show gemma2:2b # Check specific model details # Solutions ollama pull gemma2:2b # Install missing model ollama pull gemma2:9b # Install higher quality model ollama ps # Show currently loaded models","title":"Issue 2: AI Model Not Found"},{"location":"#issue-3-slow-ai-responses","text":"# Performance Optimization ollama pull gemma2:2b # Use smaller, faster model export OLLAMA_MAX_LOADED_MODELS=1 # Limit memory usage export OLLAMA_MAX_QUEUE=5 # Reduce queue size # System Resource Check htop # Monitor CPU/RAM usage (Linux/macOS) taskmgr # Task Manager (Windows) nvidia-smi # GPU usage (NVIDIA)","title":"Issue 3: Slow AI Responses"},{"location":"#issue-4-platform-wont-start","text":"# Dependency Check dotnet --version # Verify .NET 8.0+ installed godot4 --version # Verify Godot 4.4.1 # Project Repair cd local-llm-npc dotnet clean && dotnet restore && dotnet build rm -rf .godot && godot4 project.godot # Rebuild Godot cache","title":"Issue 4: Platform Won't Start"},{"location":"#issue-5-assessment-system-errors","text":"# File Permission Check chmod +x BIN/LINUX/local-llm-npc*.x86_64 # Linux permissions # Asset Verification find ASSETS/ -name \"*.cs\" | wc -l # Count C# scripts find ASSETS/ -name \"*.tscn\" | wc -l # Count scene files","title":"Issue 5: Assessment System Errors"},{"location":"#performance-optimization_1","text":"","title":"Performance Optimization"},{"location":"#for-low-end-systems-8gb-ram","text":"{ \"recommended_settings\": { \"ai_model\": \"gemma2:2b\", \"max_tokens\": 600, \"timeout\": 20, \"ui_animations\": \"minimal\", \"background_processing\": false } }","title":"For Low-End Systems (8GB RAM)"},{"location":"#for-high-end-systems-16gb-ram","text":"{ \"optimal_settings\": { \"ai_model\": \"gemma2:9b\", \"max_tokens\": 1500, \"timeout\": 45, \"ui_animations\": \"full\", \"background_processing\": true, \"concurrent_conversations\": 2 } }","title":"For High-End Systems (16GB+ RAM)"},{"location":"#debug-mode","text":"# Enable comprehensive logging export OLLAMA_DEBUG=1 export GODOT_DEBUG=1 # Run with detailed output ./local-llm-npc.exe --verbose --debug # Check log files tail -f ~/.ollama/logs/server.log tail -f ~/.local/share/godot/app_userdata/local-llm-npc/logs/ dotnet build","title":"Debug Mode"},{"location":"#check-for-missing-dependencies","text":"ldd BIN/LINUX/local-llm-npc*.x86_64 # Linux #### Issue 5: \"Assessment not loading\" ```bash # Solution: Check file permissions chmod +x BIN/LINUX/local-llm-npc*.x86_64 # Linux # Verify assessment files exist ls ASSETS/SCRIPTS/Global/ ls ASSETS/PREFABS/BUNDLE/UI/","title":"Check for missing dependencies"},{"location":"#performance-optimization_2","text":"","title":"Performance Optimization"},{"location":"#for-low-end-systems","text":"Use gemma2:2b model (lighter) Reduce max tokens to 500-800 Disable visual effects in settings Close other applications","title":"For Low-End Systems:"},{"location":"#for-high-end-systems","text":"Use gemma2:9b or gemma2:27b models Increase max tokens to 1500-2000 Enable GPU acceleration for Ollama Run multiple concurrent conversations","title":"For High-End Systems:"},{"location":"#debug-mode_1","text":"Enable debug logging for troubleshooting: # Set environment variables export OLLAMA_DEBUG=1 export GODOT_DEBUG=1 # Run with verbose output ./local-llm-npc.exe --verbose --debug # Check logs tail -f ~/.ollama/logs/server.log # Ollama logs tail -f ~/.local/share/godot/app_userdata/local-llm-npc/logs/ # Game logs","title":"Debug Mode"},{"location":"#technical-architecture","text":"","title":"Technical Architecture"},{"location":"#system-overview","text":"Local LLM NPC Agricultural University is built on a robust, modular architecture designed for scalability, performance, and maintainability. The system leverages cutting-edge technologies to deliver an exceptional educational experience. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 PRESENTATION LAYER \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 SpecialistSelector \u2502 ConversationUI \u2502 Analytics \u2502 \u2502 ProgressDashboard \u2502 AssessmentUI \u2502 SettingsUI \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 BUSINESS LOGIC LAYER \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 SpecialistManager \u2502 AssessmentEngine \u2502 Analytics \u2502 \u2502 SpecialistNPC \u2502 ConversationMgr \u2502 EventSystem \u2502 \u2502 LearningPathEngine \u2502 ProgressTracker \u2502 UserProfile \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 DATA ACCESS LAYER \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 OllamaService \u2502 GameData \u2502 FileAccess \u2502 \u2502 ConfigManager \u2502 CacheManager \u2502 StorageAPI \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 AI INTEGRATION LAYER \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 Gemma 2 Models \u2502 Ollama Server \u2502 JSON Schema \u2502 \u2502 PromptTemplates \u2502 ResponseParser \u2502 ModelRouter \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"System Overview"},{"location":"#project-structure","text":"local-llm-npc/ \u251c\u2500\u2500 ASSETS/ # Game assets and resources \u2502 \u251c\u2500\u2500 PREFABS/ # Reusable components \u2502 \u2502 \u251c\u2500\u2500 BUNDLE/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 ConversationStarter/ # Conversation system \u2502 \u2502 \u2502 \u2514\u2500\u2500 UI/ # User interface components \u2502 \u2502 \u251c\u2500\u2500 NPC/ # AI Professor prefabs \u2502 \u2502 \u251c\u2500\u2500 player/ # Player character \u2502 \u2502 \u2514\u2500\u2500 settings/ # Settings management \u2502 \u251c\u2500\u2500 SCENES/ \u2502 \u2502 \u2514\u2500\u2500 main.tscn # Main application scene \u2502 \u251c\u2500\u2500 SCRIPTS/ \u2502 \u2502 \u251c\u2500\u2500 Global/ # Global game systems \u2502 \u2502 \u2502 \u251c\u2500\u2500 GameData.cs # Game state management \u2502 \u2502 \u2502 \u251c\u2500\u2500 SpecialistManager.cs # Multi-agent coordinator \u2502 \u2502 \u2502 \u2514\u2500\u2500 ConversationAnalytics.cs # Learning analytics \u2502 \u2502 \u251c\u2500\u2500 UI/ # User interface scripts \u2502 \u2502 \u2502 \u251c\u2500\u2500 SpecialistSelector.cs \u2502 \u2502 \u2502 \u251c\u2500\u2500 ProgressDashboard.cs \u2502 \u2502 \u2502 \u2514\u2500\u2500 AssessmentInterface.cs \u2502 \u2502 \u2514\u2500\u2500 Specialists/ # AI Professor implementations \u2502 \u2502 \u251c\u2500\u2500 SpecialistNPC.cs # Base specialist class \u2502 \u2502 \u2514\u2500\u2500 LearningAssessmentSystem.cs \u2502 \u2514\u2500\u2500 TEXTURES/ # Visual assets \u251c\u2500\u2500 BIN/ # Compiled executables \u2502 \u251c\u2500\u2500 WINDOWS/ # Windows deployment \u2502 \u2514\u2500\u2500 LINUX/ # Linux deployment \u251c\u2500\u2500 Documentation/ # Project documentation \u2502 \u251c\u2500\u2500 README.md # Project overview \u2502 \u2514\u2500\u2500 USER_GUIDE.md # User manual \u251c\u2500\u2500 Configuration Files \u2502 \u251c\u2500\u2500 project.godot # Godot project settings \u2502 \u251c\u2500\u2500 local-llm-npc.csproj # C# project configuration \u2502 \u2514\u2500\u2500 local-llm-npc.sln # Solution file \u2514\u2500\u2500 Build Scripts \u251c\u2500\u2500 setup.bat # Windows setup \u2514\u2500\u2500 setup.sh # Linux setup","title":"Project Structure"},{"location":"#key-components","text":"","title":"\ud83d\udd27 Key Components"},{"location":"#1-multi-agent-ai-system","text":"public partial class SpecialistManager : Node { public static SpecialistManager Instance { get; private set; } // Core functionality public void SwitchToSpecialist(NPCSpecialty specialty); public NPCSpecialty SuggestSpecialistForTopic(string topic); public void HandleCrossReferral(string topic, NPCSpecialty from, NPCSpecialty to); // Advanced features public Dictionary<string, float> AnalyzeTopicComplexity(string query); public List<NPCSpecialty> GetCollaborativeSpecialists(string topic); }","title":"1. Multi-Agent AI System"},{"location":"#2-adaptive-assessment-engine","text":"public partial class LearningAssessmentSystem : Node { // Assessment management public AssessmentResult GenerateAdaptiveAssessment(NPCSpecialty specialty, DifficultyLevel level); public void UpdateLearnerProfile(AssessmentResult result); public CompetencyMap GetLearnerCompetencies(string userId); // Analytics integration public LearningAnalytics AnalyzeLearningProgress(); public PersonalizedRecommendations GenerateRecommendations(); }","title":"2. Adaptive Assessment Engine"},{"location":"#3-conversation-analytics","text":"public partial class ConversationAnalytics : Node { // Real-time tracking public void TrackConversationMetrics(ConversationData data); public EngagementScore CalculateEngagement(List<ConversationTurn> turns); public LearningProgress UpdateProgress(string topic, float comprehension); // Advanced analytics public HeatMap GenerateTopicHeatMap(); public List<LearningInsight> ExtractLearningInsights(); }","title":"3. Conversation Analytics"},{"location":"#technology-stack","text":"Layer Technology Version Purpose Game Engine Godot 4.4.1 Core application framework Programming C# .NET 8.0 Business logic and scripting AI Engine Ollama Latest Local AI model serving AI Models Gemma 2 2B/9B/27B Natural language processing Data Format JSON - Configuration and data storage Networking HTTP REST - Ollama API communication UI Framework Godot UI 4.4.1 User interface components","title":"Technology Stack"},{"location":"#system-workflow","text":"graph TD A[User Input] --> B[SpecialistSelector] B --> C[SpecialistManager] C --> D[SpecialistNPC] D --> E[OllamaService] E --> F[Gemma 2 Model] F --> G[Response Processing] G --> H[Cross-Referral Analysis] H --> I[Analytics Update] I --> J[UI Update] J --> K[User Response]","title":"System Workflow"},{"location":"#performance-metrics","text":"Startup Time : < 10 seconds (with cached models) Response Time : 2-15 seconds (depending on model size) Memory Usage : 4-32GB (varies by AI model) Storage : 2-15GB (including models) Concurrent Users : Single-user focused design Offline Capability : 100% after initial setup","title":"Performance Metrics"},{"location":"#development-setup","text":"","title":"Development Setup"},{"location":"#developer-prerequisites","text":"","title":"Developer Prerequisites"},{"location":"#required-software","text":"# Godot 4.4.1 (Mono/C# support) wget https://github.com/godotengine/godot/releases/download/4.4.1-stable/Godot_v4.4.1-stable_mono_linux_x86_64.zip # .NET 8.0 SDK curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --version 8.0 # Ollama (AI Engine) curl -fsSL https://ollama.ai/install.sh | sh","title":"Required Software"},{"location":"#recommended-development-tools","text":"Visual Studio Code with C# extension JetBrains Rider (premium IDE for C#) Git for version control Docker (optional, for containerized AI models)","title":"Recommended Development Tools"},{"location":"#development-workflow","text":"","title":"Development Workflow"},{"location":"#1-initial-setup","text":"# Clone repository git clone https://github.com/omchoksi108/Local-LLM-NPC-Multi-Agent-Agricultural-University-Platform.git cd local-llm-npc # Install dependencies dotnet restore # Verify setup dotnet build --configuration Debug","title":"1. Initial Setup"},{"location":"#2-godot-development","text":"# Open project in Godot godot4 project.godot # Build and run (F5) # Or use command line: godot4 --main-scene res://ASSETS/SCENES/main.tscn","title":"2. Godot Development"},{"location":"#3-ai-development-testing","text":"# Start Ollama for development ollama serve # Install development models ollama pull gemma2:2b # Fast development ollama pull codellama:7b # Code assistance # Test AI integration curl -X POST http://localhost:11434/api/generate \\ -H \"Content-Type: application/json\" \\ -d '{\"model\":\"gemma2:2b\",\"prompt\":\"Test agricultural question\"}'","title":"3. AI Development &amp; Testing"},{"location":"#testing-quality-assurance","text":"","title":"Testing &amp; Quality Assurance"},{"location":"#unit-testing","text":"# Run C# unit tests dotnet test # Run with coverage dotnet test --collect:\"XPlat Code Coverage\"","title":"Unit Testing"},{"location":"#integration-testing","text":"# Test Ollama integration bash tests/integration/test_ollama_connection.sh # Test specialist interactions bash tests/integration/test_specialist_responses.sh","title":"Integration Testing"},{"location":"#performance-testing","text":"# Memory usage profiling dotnet run --configuration Release --verbosity diagnostic # AI response time testing python tests/performance/ai_response_benchmark.py","title":"Performance Testing"},{"location":"#build-deployment","text":"","title":"Build &amp; Deployment"},{"location":"#export-configuration","text":"Configure Export Templates Download Godot export templates 4.4.1 Configure for target platforms Export Commands # Windows build godot4 --export-release \"Windows Desktop\" ./build/windows/local-llm-npc.exe # Linux build godot4 --export-release \"Linux/X11\" ./build/linux/local-llm-npc.x86_64 # macOS build godot4 --export-release \"macOS\" ./build/macos/local-llm-npc.app","title":"Export Configuration"},{"location":"#automated-build-pipeline","text":"# .github/workflows/build.yml name: Build and Test on: [push, pull_request] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - name: Setup .NET uses: actions/setup-dotnet@v3 with: dotnet-version: 8.0.x - name: Build run: dotnet build --configuration Release - name: Test run: dotnet test","title":"Automated Build Pipeline"},{"location":"#license-credits","text":"","title":"License &amp; Credits"},{"location":"#license-information","text":"License : MIT License Copyright : \u00a9 2025 Om Choksi Project : Local LLM NPC Agricultural University Platform MIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","title":"License Information"},{"location":"#project-creator","text":"Om Choksi Lead Developer & Agricultural Education Innovator Vision : Democratizing agricultural education through AI Innovation : World's first multi-agent agricultural university Expertise : AI integration, educational technology, sustainable agriculture Mission : Making agricultural knowledge accessible to everyone, everywhere","title":"Project Creator"},{"location":"#acknowledgments","text":"","title":"Acknowledgments"},{"location":"#technology-partners","text":"Godot Engine - Open-source game engine powering our platform Ollama - Local AI model serving infrastructure Google Gemma - Advanced language models for natural conversations .NET Foundation - Robust application framework","title":"Technology Partners"},{"location":"#agricultural-research-community","text":"Agricultural Extension Services worldwide for domain expertise inspiration Sustainable Agriculture Research communities for best practices Educational Technology researchers for learning science insights Open Source Community for collaborative development principles","title":"Agricultural Research Community"},{"location":"#special-thanks","text":"Early Testers who provided valuable feedback during development Agricultural Experts who validated our specialist knowledge systems Education Professionals who guided our assessment and analytics design Open Source Contributors who make projects like this possible","title":"Special Thanks"},{"location":"#contributing","text":"We welcome contributions from the community! Here's how you can help:","title":"Contributing"},{"location":"#ways-to-contribute","text":"Bug Reports : Submit issues with detailed reproduction steps Feature Requests : Propose new educational features or improvements Code Contributions : Submit pull requests with enhancements Documentation : Improve guides, tutorials, and technical documentation Translations : Help make the platform accessible in multiple languages Testing : Help test new features and report compatibility issues","title":"Ways to Contribute"},{"location":"#development-guidelines","text":"Fork the repository and create a feature branch Follow coding standards (C# conventions, Godot best practices) Write comprehensive tests for new functionality Update documentation for any user-facing changes Submit a pull request with clear description of changes","title":"Development Guidelines"},{"location":"#support-contact","text":"","title":"Support &amp; Contact"},{"location":"#getting-help","text":"Documentation : Check this guide and USER_GUIDE.md Issues : Use GitHub Issues for bug reports Discussions : Join GitHub Discussions for questions Direct Contact : Create an issue for direct communication","title":"Getting Help"},{"location":"#project-links","text":"Homepage : GitHub Repository Issues : Report Bugs & Request Features Discussions : Community Forum Documentation : Complete User Guide","title":"Project Links"},{"location":"#conclusion","text":"Local LLM NPC Agricultural University represents a paradigm shift in educational technology, combining the power of artificial intelligence with the accessibility of offline computing. This platform demonstrates that cutting-edge AI education can be privacy-first, locally-run, and universally accessible.","title":"Conclusion"},{"location":"#key-achievements","text":"World's First multi-agent agricultural AI university 100% Offline operation after initial setup 7 Specialized AI Professors with collaborative intelligence Advanced Analytics for personalized learning Open Source and community-driven development","title":"Key Achievements"},{"location":"#future-vision","text":"This project lays the foundation for the future of AI-powered education, where: - Knowledge is democratized and accessible to everyone - AI tutors are specialized and collaborative - Learning is personalized and adaptive - Privacy is preserved through local processing - Education transcends geographical and economic barriers","title":"Future Vision"},{"location":"#thank-you","text":"Thank you for exploring Local LLM NPC Agricultural University. Whether you're an educator, student, developer, or agricultural enthusiast, you're part of a community that believes in the transformative power of accessible, AI-enhanced education. Ready to start your agricultural learning journey? Developed with by Om Choksi | Powered by Godot, Ollama & Gemma | \u00a9 2025 \u2502 \u2502 \u2514\u2500\u2500 AssessmentInterface.cs \u2502 \u2514\u2500\u2500 TEXTURES/ \u251c\u2500\u2500 BIN/ \u2502 \u251c\u2500\u2500 WINDOWS/ # Windows executables \u2502 \u2514\u2500\u2500 LINUX/ # Linux executables \u251c\u2500\u2500 my-project/ \u2502 \u2514\u2500\u2500 docs/ \u2502 \u2514\u2500\u2500 index.md # This documentation \u251c\u2500\u2500 backstories/ # AI specialist knowledge \u251c\u2500\u2500 README.md # Project overview \u251c\u2500\u2500 USER_GUIDE.md # User manual \u251c\u2500\u2500 TECHNICAL_DOCUMENTATION.md # Technical details \u2514\u2500\u2500 project.godot # Godot project file ### Key Components #### 1. SpecialistManager (Core Coordination) ```csharp public partial class SpecialistManager : Node { public static SpecialistManager Instance { get; } public void SwitchToSpecialist(NPCSpecialty specialty); public NPCSpecialty SuggestSpecialistForTopic(string topic); }","title":"Thank You"},{"location":"#2-multi-agent-ai-system","text":"7 specialized AI professors Cross-referral intelligence Collaborative problem solving Domain-specific expertise","title":"2. Multi-Agent AI System"},{"location":"#3-assessment-engine","text":"Adaptive difficulty adjustment Multiple question types Real-time performance tracking Competency mapping","title":"3. Assessment Engine"},{"location":"#4-analytics-system","text":"Learning pattern recognition Progress tracking Performance analytics Personalized recommendations","title":"4. Analytics System"},{"location":"#development-setup_1","text":"","title":"Development Setup"},{"location":"#prerequisites-for-development","text":"Development Environment ```bash # Install Godot 4.4.1 (Mono/C#) wget https://downloads.tuxfamily.org/godotengine/4.4.1/mono/ # Install .NET 8.0 SDK curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --version 8.0.0 # Install Visual Studio Code (optional) wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg ``` AI Development Tools ```bash # Install Ollama for AI development curl -fsSL https://ollama.ai/install.sh | sh # Pull development models ollama pull gemma2:2b ollama pull codellama:7b # For code assistance ```","title":"Prerequisites for Development"},{"location":"#building-from-source","text":"Clone and Setup ```bash git clone https://github.com/omchoksi108/Local-LLM-NPC-Multi-Agent-Agricultural-University-Platform.git cd local-llm-npc # Restore dependencies dotnet restore # Build project dotnet build --configuration Release ``` Development Workflow ```bash # Open in Godot Editor godot4 project.godot # Or use VS Code with Godot extension code . ``` Testing ```bash # Run unit tests dotnet test # Integration testing with Ollama curl http://localhost:11434/api/generate -d '{\"model\":\"gemma2:2b\",\"prompt\":\"Test\"}' ```","title":"Building from Source"},{"location":"#export-for-distribution","text":"Configure Export Templates Download Godot export templates Configure for target platforms (Windows/Linux/macOS) Export Commands ```bash # Export for Windows godot4 --export-release \"Windows Desktop\" ./build/windows/local-llm-npc.exe # Export for Linux godot4 --export-release \"Linux/X11\" ./build/linux/local-llm-npc.x86_64 # Export for macOS godot4 --export-release \"macOS\" ./build/macos/local-llm-npc.app ```","title":"Export for Distribution"},{"location":"#license-and-credits","text":"License : MIT License Created by : Om Choksi Project : Local LLM NPC Agricultural University Platform Technology : Godot 4.4.1, C#/.NET 8.0, Ollama, Gemma 2 Models","title":"License and Credits"},{"location":"#acknowledgments_1","text":"Godot Engine - Open-source game engine Ollama - Local AI model serving Google Gemma - Advanced language models Agricultural Research Community - Domain expertise inspiration","title":"Acknowledgments"},{"location":"#support-and-contact","text":"For technical support, contributions, or questions: Creator : Om Choksi Project Repository : GitHub - Local LLM NPC Documentation : This file and accompanying guides Issues : Use GitHub Issues for bug reports and feature requests","title":"Support and Contact"},{"location":"#getting-help_1","text":"Check Troubleshooting Section above Review User Guide : USER_GUIDE.md Technical Details : TECHNICAL_DOCUMENTATION.md Community Support : GitHub Discussions Direct Contact : Create an issue with detailed information Happy Learning! Welcome to the future of agricultural education with AI-powered, multi-agent learning systems!","title":"Getting Help"}]}